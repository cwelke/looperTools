#include <vector>
#include <algorithm>
#include <iostream>
#include <fstream>

class badEvents
{

public:

  bool fails( int run, int lumi, ULong64_t event )
  {
	bool foundRun = false;
	if( std::find(l_run.begin(), l_run.end(), run) != l_run.end() ) foundRun = true;
	bool foundLumi = false;
	if( std::find(l_lumi.begin(), l_lumi.end(), lumi) != l_lumi.end() ) foundLumi = true;
	bool foundEvent = false;
	if( std::find(l_event.begin(), l_event.end(), event) != l_event.end() ) foundEvent = true;

    if( foundRun && foundLumi && foundEvent ) return false;
	else return true;
  }

  void loadBadEventList( std::string listname )
  {

	std::cout<<"Loading filter: "<<listname<<std::endl;

	ifstream filterFile;
	filterFile.open(listname.c_str());
	int val1 = 0;
	int val2 = 0;
	ULong64_t val3 = 0;

	while( filterFile.good() )
	  {
		filterFile>>val1>>val2>>val3;
		l_run.push_back(val1);
		l_lumi.push_back(val2);
		l_event.push_back(val3);
	  }

	filterFile.close();
  }

  void printBadEventList()
  {
	std::cout<<"Run\tLumi\tEvent "<<std::endl;
	for( size_t ind = 0; ind < l_run.size(); ind++ ){
	  std::cout<<l_run.at(ind)<<"\t"<<l_lumi.at(ind)<<"\t"<<l_event.at(ind)<<std::endl;
	}
  }

private:

  std::vector <int> l_run, l_lumi;
  std::vector <ULong64_t> l_event;


};

//Test Implemetation
// void badEventFilter()
// {

//   badEvents ecalLaser;
//   // std::string list = "sample.txt";
//   std::string list = "/home/users/cwelke/ZAnalysis/Spring2013/macros/filters/ecalLaser_DoubleElectron_Run2012_filter.txt";
//   ecalLaser.loadBadEventList( list );
//   // ecalLaser.printBadEventList();

//   if( ecalLaser.fails(201191,	99,	92334813) )
// 	std::cout<<"Passes 1!"<<std::endl;// should not print
//   if( ecalLaser.fails(112321, 3411, 567812345) )
// 	std::cout<<"Passes 2!"<<std::endl;

// }
